plugins {
    id "java"
    id "maven-publish"
    id "signing"
    alias(libs.plugins.gradle.embulk.plugins)
    id "checkstyle"
}

repositories {
    mavenCentral()
}

group = rootProject.group
version = rootProject.version
description = "Guesses a configuration with a schema if an input is CSV."

configurations {
    compileClasspath.resolutionStrategy.activateDependencyLocking()
    runtimeClasspath.resolutionStrategy.activateDependencyLocking()
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    options.encoding = "UTF-8"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }

    withJavadocJar()
    withSourcesJar()
}

dependencies {
    compileOnly libs.embulk.spi
    compileOnly libs.slf4j

    implementation project(":embulk-guess-csv")
    implementation project(":")

    implementation libs.embulk.util.config
    implementation libs.validation
    implementation libs.bundles.jackson

    implementation libs.embulk.util.csv
    implementation libs.embulk.util.guess
    implementation libs.embulk.util.json
    implementation libs.embulk.util.rubytime
    implementation libs.embulk.util.timestamp

    testImplementation libs.junit4
    testImplementation libs.embulk.spi
    testImplementation libs.embulk.core
    testImplementation libs.embulk.deps
    testImplementation libs.embulk.junit4
    testImplementation libs.guava

    testImplementation libs.embulk.formatter.csv
    testImplementation libs.embulk.input.file
    testImplementation libs.embulk.output.file
    testImplementation libs.embulk.parser.csv
    testImplementation libs.embulk.guess.bzip2
    testImplementation libs.embulk.guess.gzip
    testImplementation libs.embulk.guess.json
}

embulkPlugin {
    mainClass = "org.embulk.guess.csv_all_strings.CsvAllStringsGuessPlugin"
    category = "guess"
    type = "csv_all_strings"
}

jar {
    metaInf {
        from rootProject.file("LICENSE")
        // No NOTICE because the Maven artifact does not contain embulk-util-guess by itself.
        // But, be noted when building a package that includes dependencies of embulk-guess-csv.
    }
}

sourcesJar {
    metaInf {
        from rootProject.file("LICENSE")
        // No NOTICE because the Maven artifact does not contain embulk-util-guess by itself.
        // But, be noted when building a package that includes dependencies of embulk-guess-csv.
    }
}

javadocJar {
    metaInf {
        from rootProject.file("LICENSE")
        // No NOTICE because the Maven artifact does not contain embulk-util-guess by itself.
        // But, be noted when building a package that includes dependencies of embulk-guess-csv.
    }
}

publishing {
    publications {
         maven(MavenPublication) {
            groupId = project.group
            artifactId = project.name

            from components.java
             // javadocJar and sourcesJar are added by java.withJavadocJar() and java.withSourcesJar() above.
             // See: https://docs.gradle.org/current/javadoc/org/gradle/api/plugins/JavaPluginExtension.html

            pom {  // https://central.sonatype.org/pages/requirements.html
                packaging "jar"

                name = project.name
                description = project.description
                url = "https://www.embulk.org/"

                licenses {
                    license {
                        // http://central.sonatype.org/pages/requirements.html#license-information
                        name = "The Apache License, Version 2.0"
                        url = "https://www.apache.org/licenses/LICENSE-2.0.txt"
                        distribution = "repo"
                    }
                }

                developers {
                    developer {
                        name = "Dai MIKURUBE"
                        email = "dmikurube@acm.org"
                    }
                }

                scm {
                    connection = "scm:git:git://github.com/embulk/embulk-parser-csv.git"
                    developerConnection = "scm:git:git@github.com:embulk/embulk-parser-csv.git"
                    url = "https://github.com/embulk/embulk-parser-csv"
                }
            }
        }
    }

    repositories {
        maven {  // publishMavenPublicationToMavenCentralRepository
            name = "mavenCentral"
            if (project.version.endsWith("-SNAPSHOT")) {
                url "https://oss.sonatype.org/content/repositories/snapshots"
            } else {
                url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            }

            credentials {
                username = project.hasProperty("ossrhUsername") ? ossrhUsername : ""
                password = project.hasProperty("ossrhPassword") ? ossrhPassword : ""
            }
        }
    }
}

signing {
    if (project.hasProperty("signingKey") && project.hasProperty("signingPassword")) {
        logger.lifecycle("Signing with an in-memory key.")
        useInMemoryPgpKeys(signingKey, signingPassword)
    }
    sign publishing.publications.maven
}

test {
    maxHeapSize = "1536m"
    forkEvery = 1  // test processes are forked by each test class (default is 0)
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat = org.gradle.api.tasks.testing.logging.TestExceptionFormat.FULL
        showCauses = true
        showExceptions = true
        showStackTraces = true
        showStandardStreams = true
        outputs.upToDateWhen { false }
    }
}

tasks.withType(Checkstyle) {
    reports {
        // Not to skip up-to-date checkstyles.
        outputs.upToDateWhen { false }
    }
}

checkstyle {
    toolVersion "8.7"
    configFile = file("${rootProject.projectDir}/config/checkstyle/checkstyle.xml")
    configProperties = [
        "checkstyle.config.path": file("${rootProject.projectDir}/config/checkstyle")
    ]
    ignoreFailures = false
    maxWarnings = 0  // https://github.com/gradle/gradle/issues/881
}
